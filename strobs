#! /bin/sh
#
# Stream-Observer (strobs) is a script to observe running voc video streams.
#
# The script opens mpv with all active (currently streaming) streams from
# Chaos Computer Club made by VOC (video operation center) in a playlist
# as found at https://streaming.media.ccc.de.
# Optionally it can also try to open all streams given in a valid playlist.
#
# MIT License
# Copyright (c) 2020 Simpel
# SPDX-FileCopyrightText: 2020 Simpel <stream-observer@simpel.cc>
#
# SPDX-License-Identifier: MIT

# Shell Strict Mode: http://redsymbol.net/articles/unofficial-bash-strict-mode
# set -e: exit if something fails; set -u: exit if a variable is unset
# set -o pipefail: prevents errors in a pipeline from being masked
# If a command in pipeline fails, return code will be return code of whole pipeline
set -euo pipefail
# word splitting shall happen only on newlines and tab characters
# By default it is set to $' \n\t' - space, newline, tab - which is too eager
IFS=$'\n\t'

#######################################
### Globals
#######################################

readonly cdnserver="https://cdn.c3voc.de/hls/"
readonly cdnstreamsuffix="/native_hd.m3u8"
readonly streamjsonurl="https://streaming.media.ccc.de/streams/v2.json"
readonly red='\033[0;31m'
readonly yellow='\033[0;33m'
readonly nc='\033[0m' # No Color
readonly underlined='\033[4m'
readonly progname="${0##*/}"
readonly progpath="${0%/*}/"
readonly version="3.0.31"

unset conference    # if set contains the name of the conference
unset debug         # if set print verbose messages red to differ from debug messages
unset exitscript    # if set don't open mpv; useful for debugging and json export
unset force         # if set and used with option -p / -j forces open playlist / load full json
unset JSON          # if set contains the whole streaming json content
unset name_array    # if set contains conferences, streams and display names
unset name_ext      # if set playlist server names append technical name (e.g. s23)
unset print_json    # if set export json to disk
unset playlist      # if set use directly this playlist
unset playlist_info # if set contains Info line in mvp what stream it is
unset sort          # if set servers sorted alphanumerical else as found
unset timetable     # if set timetable of running and coming events is printed

usedmedia="${cdnstreamsuffix}"  # is either set to cdnstreamsuffix or set with option -M
usedserver="${cdnserver}"       # is either set to cdnserver or set with option -S
verbosity=0                     # if > 0 show verbose messages in levels

#######################################
### Functions
#######################################

#######################################
# Print verbose messages (in red if debug).
# Globals:
#   verbosity
#   debug
#   red
#   nc
# Arguments:
#   level
# Outputs:
#   msg to STDERR
# Returns:
#   None
#######################################
verbose() {
  msg="${1}"
  level="${2:-1}" # default 1 if not given
  i=0
  # only level up to verbosity
  if [ ${level} -le ${verbosity} ]; then
    # print '=' for every level
    while [ ${i} -lt ${level} ]; do
      # colorize in debug mode
      if [ -n "${debug-}" ]; then
        printf "${red}=${nc}\n" >&2
      else
        printf "=" >&2
      fi
      i=$((${i} + 1))
    done
    # print verbose message (colorize in debug mode)
    if [ -n "${debug-}" ]; then
      echo "${red}> ${msg}${nc}" >&2
    else
      echo "> ${msg}" >&2
    fi
  fi
}

#######################################
# Show extracted shortcuts from input.conf.
# Globals:
#   progpath
#		yellow
#		nc
# Arguments:
#   None
# Outputs:
#   shortcut to STDOUT
# Returns:
#   None
#######################################
keys() {
  if [ ! -f "${progpath}input.conf" ]; then
    printf "%b\n" "${yellow}Warning: '${progpath}input.conf' with key definition does not exist${nc}" 1>&2
    exit 1
  fi
  echo "Shortcuts:"
  # grep all lines start not with #
  grep '^[[:blank:]]*[^[:blank:]#]' ${progpath}input.conf
  verbose "keys (${LINENO}): grep shortcuts from 'input.conf': $?" 2
  exit 0
}

#######################################
# Prints timetable with conferene, start and end date.
# Globals:
#   None
# Arguments:
#   api json in JSON
# Outputs:
#   startsAt \t endsAt \t conferene to STDOUT
# Returns:
#   None
#######################################
timetable_array() {
  verbose "timetable_array (${LINENO}): Create timetable array"
  # Catch conference, startsAt, endsAt of every stream event
  result="$(echo "$1" | grep -E "\"conference\": \"?.+\"?,|\"startsAt\": \"?.+\"?,|\"endsAt\": \"?.+\"?,")"
  verbose "timetable_array (${LINENO}): Grep 'conference, startsAt, endsAt and values': $?" 2
  # Make one plain, clean line of them all
  result="$(echo "${result}" | awk '{$1=$1;print}')"
  verbose "timetable_array (${LINENO}): Remove leading/trailing white spaces: $?" 2
  result="$(echo "${result}" | sed 's/,$//g')"
  verbose "timetable_array (${LINENO}): Remove trailing commas: $?" 2
  result="$(echo "${result}" | tr '\n' '\t')"
  verbose "timetable_array (${LINENO}): Replace all newlines with tabs: $?" 2
  # Make every stream event a single line
  result="$(echo "${result}" | sed 's/\"conference/\'$'\n\"conference/g')"
  verbose "timetable_array (${LINENO}): Insert newlines before conference: $?" 2
  # Remove first empty line
  result="$(echo "${result}" | tail -n +2)"
  verbose "timetable_array (${LINENO}): Remove first newline: $?" 2
  # Remove all keys from key:value
  result="$(echo "${result}" | sed 's/\"conference\": //g')"
  verbose "timetable_array (${LINENO}): Remove 'conference': $?" 2
  result="$(echo "${result}" | sed 's/\"startsAt\": //g')"
  verbose "timetable_array (${LINENO}): Remove 'startsAt': $?" 2
  result="$(echo "${result}" | sed 's/\"endsAt\": //g')"
  verbose "timetable_array (${LINENO}): Remove 'endsAt': $?" 2
  result="$(echo "${result}" | sed 's/\"//g')"
  verbose "timetable_array (${LINENO}): Remove all \": $?" 2
  # Remove +0000 in timestamps
  result="$(echo "${result}" | sed 's/+0000//g')"
  verbose "timetable_array (${LINENO}): Remove '+0000': $?" 2
  # Change order and set conference last
  result="$(echo "${result}" | awk -v FS='\t' -v OFS='\t' '{print $2, $3, $1}')"
  verbose "timetable_array (${LINENO}): Change order: $?" 2
  # Return only events that are running or planned
  date="$(date -u +"%Y-%m-%dT%H:%M:%S")" # now
  result="$(echo "${result}" | awk -F '\t' -v force_date="${date}" '$2>=force_date && $2!="null" {print $0}')"
  verbose "timetable_array (${LINENO}): Strip timetable array to now"
  # Remove disturbing 'T' from UTC timestamps
  result="$(echo "${result}" | sed 's/\([0-9]\{4\}-[0-9][0-9]-[0-9][0-9]\)T\([0-9][0-9]:[0-9][0-9]:[0-9][0-9]\)/\1 \2/g')"
  verbose "timetable_array (${LINENO}): Remove 'T' from timestamps: $?" 2
  if [ -z "${result-}" ]; then
    printf "%b\n" "${yellow}Warning: no events found${nc}" 1>&2
  else
    printf "%b\n" "${yellow}starts at (UTC)\t\tends at (UTC)\t\tconference${nc}" 1>&2
    printf "%b\n" "${result}" 1>&2
  fi
}

#######################################
# Extract slug array from json.
# Globals:
#   None
# Arguments:
#   JSON
# Outputs:
#   (slug \n slug \n ...)* to STDOUT
# Returns:
#   result
#######################################
slugs() {
  verbose "slugs (${LINENO}): Create slugs array"
  result="$(echo "$1" | jq -r '.[].groups[].rooms[].display')"
  verbose "slugs (${LINENO}): Output 'slugs' with jq: $?" 2
  verbose "slugs:\n$result" 3
  echo "${result}"
}

#######################################
# Convert api json to names array.
# Globals:
#   None
# Arguments:
#   JSON
# Outputs:
#   ((stream \n display \n)* conference)* to STDOUT
# Returns:
#   result
#######################################
name_array() {
  verbose "name_array (${LINENO}): Create name array"
  # Catch all "conferences", "display" with 24spaces ahead (there are many more "display"), "stream"
  result="$(echo "$1" | grep -E '\"conference\":|^\s{24}\"display\":|\"stream\":')"
  verbose "name_array (${LINENO}): Grep 'conferences, display, streams incl. values': $?" 2
  result="$(echo "${result}" | awk '{$1=$1;print}')"
  verbose "name_array (${LINENO}): Remove leading and trailing spaces: $?" 2
  result="$(echo "${result}" | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }')"
  verbose "name_array (${LINENO}): Reorder list upside down: $?" 2
  echo "${result}"
}

#######################################
# Returns line number where stream is found in name_array.
# Globals:
#   name_array
# Arguments:
#   STREAM
# Outputs:
#   Integer to STDOUT
# Returns:
#   result
#######################################
stream_pos() {
  verbose "stream_pos (${LINENO}): Return line number where stream is found"
  result="$(echo "${name_array}" | sed -n '/'$1'/=')"
  verbose "stream_pos (${LINENO}): Get position of '$1': $?" 2
  echo "${result}"
}

#######################################
# Returns display name found in name_array.
# Globals:
#   name_array
# Arguments:
#   STREAM_POS
# Outputs:
#   display to STDOUT
# Returns:
#   result
#######################################
display() {
  verbose "display (${LINENO}): Return display name from name_array"
  result="$(echo "${name_array}" | awk 'NR=='$1'')"
  verbose "display (${LINENO}): Print line $1: $?" 2
  result="$(echo "${result}" | sed 's/"display": "//g')"
  verbose "display (${LINENO}): Remove '\"display\":': $?" 2
  result="$(echo "${result}" | sed 's/",//g')"
  verbose "display (${LINENO}): Remove '\",': $?" 2
  echo "${result}"
}

#######################################
# Returns conference found in name_array.
# Globals:
#   name_array
# Arguments:
#   STREAM_POS
# Outputs:
#   conference to STDOUT
# Returns:
#   result
#######################################
findconference() {
  verbose "findconference (${LINENO}): Return conferences from name_array"
  result="$(echo "${name_array}" | awk 'NR>='$1'')"
  verbose "findconference (${LINENO}): Print lines from $1: $?" 2
  result="$(echo "${result}" | grep -m 1 "conference")"
  verbose "findconference (${LINENO}): Grep first occurence of 'conference including value': $?" 2
  result="$(echo "${result}" | sed 's/"conference": "//g')"
  verbose "findconference (${LINENO}): Remove '\"conference\":': $?" 2
  result="$(echo "${result}" | sed 's/",//g')"
  verbose "findconference (${LINENO}): Remove '\",': $?" 2
  echo "${result}"
}

#######################################
# Returning servers sorted alphanumerical.
# Globals:
#   None
# Arguments:
#   SLUGS
# Outputs:
#   sorted streams to STDOUT
# Returns:
#   None
#######################################
sort_alphanum() {
  verbose "sort_alphanum (${LINENO}): Sorting servers"
  # Padding numbers with zeros to make sort with leading characters work
  result="$(echo "$1" | awk '{ gsub(/([^[:digit:]]+|[[:digit:]]+)/,"&\t") ; printf("%s%05d\n", $1, $2)}')"
  verbose "sort_alphanum (${LINENO}): Fill numbers with leading zeros: $?" 2
  result="$(echo "${result}" | sort -n)"
  verbose "sort_alphanum (${LINENO}): Sort numerical: $?" 2
  # Split leading characters to remove padded zeros
  result="$(echo "${result}" | awk '{ gsub(/([^[:digit:]]+|[[:digit:]]+)/,"&\t") ; print  $1, $2}')"
  verbose "sort_alphanum (${LINENO}): Split at beginning of number: $?" 2
  result="$(echo "${result}" | awk '{gsub ("^0*", "", $2); printf("%s%s\n", $1, $2)}')"
  verbose "sort_alphanum (${LINENO}): Strip leading zeros and merge: $?" 2
  echo "${result}"
}

#######################################
# Print streaming.json, icecast-status.xsl.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
printjson() {
  verbose "printjson (${LINENO}): Print status_liveber.xsl, status_ingest.xsl, current.json"
  # Export icecast status to disk
  curl -sSf http://live.ber.c3voc.de:7999/status-json.xsl >status_liveber.xsl
  curl -sSf http://ingest.c3voc.de:8000/status-json.xsl >status_ingest.xsl
  # Export streaming.json to disk
  if [ -n "${force-}" ]; then
    # with option forceopen=1 (shows all streams done, running and planned)
    JSON="$(curl -sSf https://streaming.media.ccc.de/streams/v2.json?forceopen=1)"
  else
    # shows only running streams
    JSON="$(curl -sSf https://streaming.media.ccc.de/streams/v2.json)"
  fi
  echo "${JSON}" >current.json
  # Don't start mpv and avoid deleting current-playlist.m3u8
  exitscript=true
}

#######################################
# Cleanup on exit.
#   Delete current-playlist (if not exitscript).
# Globals:
#   playlist
#   exitscript
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
cleanup() {
  verbose "cleanup (${LINENO}): Cleanup on exit" 3
  # delete current playlist
  playlist="${progpath}current-playlist.m3u8"
  if [ -e "${playlist}" ] && [ -z "${exitscript-}" ]; then
    rm "${playlist}"
    verbose "cleanup (${LINENO}): Delete 'current-playlist.m3u8': $?" 3
  fi
  #  delete voctocat.gif
  if [ -e "${progpath}voctocat.gif" ] && [ -z "${exitscript-}" ]; then
    rm "${progpath}voctocat.gif"
    verbose "cleanup (${LINENO}): Delete 'voctocat.gif': $?" 3
  fi
  exit 0
}

#######################################
# Opens man page strobs.1.
# Globals:
#   progpath
#		yellow
#		nc
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
manpage() {
  if [ ! -f "${progpath}strobs.1" ]; then
    printf "%b\n" "${yellow}Warning: man page '${progpath}strobs.1' does not exist${nc}" 1>&2
    exit 1
  fi
  man ${progpath}strobs.1
  exit 0
}

#######################################
# Prints the usage manual.
# Globals:
#   progname
#   underlined
#   nc
# Arguments:
#   None
# Outputs:
#   usage to SDTOUT
# Returns:
#   None
#######################################
manual() {
  echo "Usage: ${progname} [ -d | -D | -f | -h | -i | -j | -k | -m | -M ${underlined}media${nc} | -n | -p ${underlined}file${nc} |"
  echo "                -s | -S ${underlined}server${nc} | -t | -v | -V | -x]"
  echo "       opens mpv with all active voc streams"
  echo "       -d debug mode: print commands and arguments while executed"
  echo "       -D debug mode: print script lines while read"
  echo "       -f forces (with -p / -j) open playlist / download full json"
  echo "       -h help shown"
  echo "       -i ingest streams using"
  echo "       -j json export to disk"
  echo "       -k keys/shortcuts shown"
  echo "       -m man page shown"
  echo "       -M ${underlined}media${nc} / suffix after slug; '' allowed"
  echo "       -n name stream with technical extension"
  echo "       -p playlist ${underlined}file${nc} with servers in format m3u8"
  echo "       -s sort server list alphanumerical"
  echo "       -S ${underlined}server${nc} including protocol and port"
  echo "       -t timetable of running and coming events shown"
  echo "       -v verbosity increasing with ${underlined}v${nc}"
  echo "       -V version print"
  echo "       -x exit before mpv, keeps current-playlist.m3u8"
  exit 0
}

#######################################
# Creates voctocat.gif.
# Globals:
#   progpath
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
voctocat_file() {
  voctocat="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"

  verbose "voctocat_file (${LINENO}): export voctocat.gif"
  echo "${voctocat}" | base64 -D -o "${progpath}voctocat.gif"
  verbose "voctocat_file (${LINENO}): base64 voctocat.gif: $?" 2
}

#######################################
### Main
#######################################

# Check options
while getopts 'dDfhijkmM:np:sS:tvVx' option 2>/dev/null; do
  case "${option}" in
  d)
    set -x # print commands and arguments while executed
    debug=true
    ;;
  D)
    set -v # print script lines while read
    debug=true
    ;;
  f) force=true ;;
  h) manual ;;
  i) play_ingest=true;;
  j) print_json=true ;;
  k) keys ;;
  m) manpage ;;
  M) usedmedia="${OPTARG}" ;;
  n) name_ext=true ;;
  p) playlist="${OPTARG}" ;;
  s) sort=true ;;
  S) usedserver="${OPTARG}" ;;
  t)
    timetable=true
    force=true
    ;;
  v) verbosity=$((${verbosity} + 1)) ;;
  V)
    echo "${progname} version ${version}"
    exit 0
    ;;
  x) exitscript=true ;;
  *)
    if [ $1 != "-?" ]; then
      curropt=$((${OPTIND} - 1))
      eval "curropt=\$${curropt}"
      printf "%b\n" "${yellow}Warning: illegal option ${curropt}${nc}" 1>&2
    fi
    manual
    ;;
  esac
done
verbose "${yellow}Note: number after colon usually represents commands exit code${nc}"
verbose "Level of verbosity: ${verbosity}"

# Exit handler
trap cleanup 0 1 2 3 6

# Check for option -j
if [ -n "${print_json-}" ]; then
  printjson
fi

# Check for option -t; print timetable of running and coming events
if [ -n "${timetable-}" ]; then
  # First disable exit on error as this is not important to run
  set +e
  # with option forceopen=1 (shows all streams done, running and planned)
  JSON="$(curl -sSf https://streaming.media.ccc.de/streams/v2.json?forceopen=1)"
  verbose "main (${LINENO}): Curl json for option -t: $?" 2
  # Enable exit on error again
  set -e
  # Check for curl error: if so json is empty
  if [ "$(echo "${JSON}")" = "" ]; then
    printf "%b\n" "${yellow}Warning: no json for timetable available${nc}" 1>&2
  else
    # Print start date, end date and conference from $JSON
    timetable_array "${JSON}"
  fi
  exit 0
fi

# Check if mpv is existing
if ! [ -x "$(command -v mpv)" ]; then
  printf "%b\n" "${red}Error: mpv does not exist, please install${nc}" 1>&2
  printf "%b\n" "Look: https://mpv.io/installation" 1>&2
  exit 1
fi

# Check if jq is existing
if ! [ -x "$(command -v jq)" ]; then
  printf "%b\n" "${red}Error: jq does not exist, please install${nc}" 1>&2
  printf "%b\n" "Look: https://stedolan.github.io/jq" 1>&2
  exit 1
fi

# Create voctocat.gif
voctocat_file

# Choose the playlist
# Playlist given with option -p
if [ -n "${playlist-}" ]; then
  verbose "Used playlist: ${playlist}"
  if [ ! -f "${playlist}" ]; then
    if wget --spider "${playlist}" 2>/dev/null; then
      verbose "Used playlist is remote"
    else
      if [ ! -n "${force-}" ]; then
        printf "%b\n" "${yellow}Warning: playlist '${playlist}' does not exist, but you can enforce with option -f${nc}" 1>&2
        exit 1
      fi
    fi
  fi
else
  # Playlist should have only streams found at streaming json
  playlist="${progpath}current-playlist.m3u8"
  verbose "Used playlist: ${playlist}"

  # Catch streams status
  # curl  -s (silent mode - no progress or error messages)
  #       -S (show-error - used with -s it shows an error message if it fails)
  #       -f (fail silently)
  # not exiting if curl is failing
  set +e
  JSON="$(curl -sf https://streaming.media.ccc.de/streams/v2.json)"
  set -e
  verbose "${JSON}" 4
  verbose "main (${LINENO}): Read stream json"
  if [ -z "${JSON-}" ]; then
    printf "%b\n" "${yellow}Warning: no active streams available${nc}" 1>&2
    exit 1
  fi

  # Find streams in $JSON
  SLUGS="$(slugs "${JSON}")"
  # Exit if no servers found
  if [ "${SLUGS}" = "" ]; then
    printf "%b\n" "${yellow}Warning: no live streams available${nc}" 1>&2
    exit 1
  fi
  # Sort slugs alphanumerical
  if [ -n "${sort-}" ]; then
    SLUGS="$(sort_alphanum "${SLUGS}")"
  fi
  verbose "Extracted slugs:\n${SLUGS}" 3

  # Read running streams by api json - look for matches for displayed stream name
  name_array="$(name_array "${JSON}")"
  if [ -z "${name_array-}" ]; then
    verbose "${yellow}No display names for active streams available${nc}"
  fi

  # Be sure for correct slashes on usedserver/ and /usedmedia
  usedserver="$(echo "${usedserver}" | sed 's/\/*$/\//g')"
  if [ -n "${usedmedia}" ]; then
    usedmedia="$(echo "${usedmedia}" | sed 's/^\/*/\//g')"
  fi

  # Create playlist
  # Playlist header
  echo "#EXTM3U" >"${playlist}"
  echo "#EXT-X-VERSION:3" >>"${playlist}"
  # Repeat playlist names and servers and "#EXT-X-DISCONTINUITY"
  verbose "main (${LINENO}): Create playlist"
  counter="1"
  for STREAM in ${SLUGS}; do
    unset conference
    unset DISPLAY
    unset playlist_info
    if [ -n "${name_array-}" ]; then
      STREAM_POS="$(stream_pos "${STREAM}")"
      if [ -n "${STREAM_POS-}" ]; then
        if [ "$(echo "${STREAM_POS}")" -gt 0 ]; then
          STREAM_POS=$((STREAM_POS + 1))
          DISPLAY="$(display "${STREAM_POS}")"
          conference="$(findconference "${STREAM_POS}")"
        fi
      fi
      if [ -n "${conference-}" ]; then
        verbose "main (${LINENO}): Conference found: ${conference}" 3
        playlist_info=${conference}" - "
      fi
      if [ -n "${DISPLAY-}" ]; then
        verbose "main (${LINENO}): Display found: ${DISPLAY}" 3
        playlist_info=${playlist_info}${DISPLAY}
      fi
      if [ -z "${playlist_info-}" ]; then
        verbose "main (${LINENO}): Playlist empty" 3
        playlist_info=${STREAM}
      else
        if [ -n "${name_ext-}" ]; then
          verbose "main (${LINENO}): Option -n - add stream: ${STREAM}" 3
          playlist_info=${playlist_info}" - "${STREAM}
        fi
      fi
    else
      playlist_info=${STREAM}
    fi
    # add numbers for direct call in mpv
    playlist_info=${playlist_info}" - #"${counter}
    # Write stream as info into playlist
    echo "#EXTINF:0,${playlist_info}" >>"${playlist}"
    verbose "main (${LINENO}): Add ${playlist_info} to playlist: $?" 3
    # Write server into playlist
    echo "${usedserver}${STREAM}${usedmedia}" >>"${playlist}"
    verbose "main (${LINENO}): Add ${usedserver}${STREAM}${usedmedia} to playlist: $?" 3
    # Write playlist divider
    echo "#EXT-X-DISCONTINUITY" >>"${playlist}"
    counter=$((counter + 1))
  done
  {
    # Set a picture as last, so mpv will not end
    echo "#EXTINF:0,end of list"
    echo "${progpath}voctocat.gif"
    # End of playlist
    echo "#EXT-X-ENDLIST"
  } >>"${playlist}"
  verbose "main (${LINENO}): Playlist complete: $?"
fi

# Exit if set option '-x'
if [ -n "${exitscript-}" ]; then
  exit 0
fi

# That is really playing
# Check mpv options in README.md
mpv "${playlist}" \
  --fs \
  --no-ytdl \
  --msg-level=all=error,ffmpeg=fatal \
  --no-input-default-bindings \
  --input-conf=${progpath}input.conf \
  --load-scripts=no \
  --scripts=${progpath}keys.lua \
  --force-window=immediate \
  --keep-open=always \
  --idle=yes \
  --vd-lavc-show-all=yes \
  --no-initial-audio-sync \
  --audio-stream-silence=yes \
  --demuxer-cache-wait=no \
  --force-seekable=no \
  --image-display-duration=inf \
  --screenshot-format=png \
  --script-opts=osc-visibility=always,osc-seekbarstyle=knob \
  --osd-duration=5000 \
  --osd-msg1="room: 1 – 0       audio: q, w, e - Native, Translated, Translated-2       video: y, x - HD, Slides" \
  --no-osd-bar \
  --osd-font-size=30 \
  --osd-spacing=1 \
  --osd-border-size=1 \
  --osd-margin-x=10 \
  --osd-margin-y=4

verbose "Exit"
exit 0
