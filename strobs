#! /bin/sh
#
# Opens mpv with all active (currently streaming) voc streams in a playlist.
#
# With options you can try all existing servers,
# try all servers that will be, are and were active until given days or
# try all servers given in a valid playlist.
#
# MIT License
# Copyright (c) 2020 Conrad Zelck

# set e: exit if something fails; set u: exit if a variable is unset
set -eu

#######################################
### Globals
#######################################

readonly SERVERPATH="http://live.ber.c3voc.de:7999/"
readonly RTMPPATH="http://ingest.c3voc.de:8000/"
readonly RED='\033[0;31m'
readonly YELLOW='\033[0;33m'
readonly NC='\033[0m' # No Color
readonly UNDERLINED='\033[4m'
readonly PROGNAME="${0##*/}"
readonly PROGPATH="${0%/*}/"
readonly VERSION="1.1.21"
unset DEBUG # if set print verbose messages red to differ from debug messages
unset EXIT # if set don't open mpv; useful for debugging and json export
unset FORCE # if set use more servers than currently streaming ones
unset FORCE_DATE # if set defines days back from now to try past stream events
unset ICECAST # if set contains icecast status json
unset NAME_EXT # if set playlist server names append technical name (e.g. s23)
unset PRINT_JSON # if set export json to disk
unset PLAYLIST # if set use directly this playlist
unset SORT # if set servers sorted alphanumerical else as found
unset TIMETABLE # if set timetable of running and coming events is printed
VERBOSITY=0 # if > 0 show verbose messages in levels

#######################################
# DescriptionOfTheFunction.
# Globals:
#   ListOfGlobalVariablesUsedOrModified
# Arguments:
#   ArgumentsTaken
# Outputs:
#   OutputToSTDOUTorSTDERR
# Returns:
#   ReturnedvValuesOtherThenExitStatus
#######################################

#######################################
### Functions
#######################################

#######################################
# Print verbose messages (in red if DEBUG).
# Globals:
#   VERBOSITY
#   DEBUG
#   RED
#   NC
# Arguments:
#   level
# Outputs:
#   msg to STDERR
# Returns:
#   None
#######################################
verbose() {
	msg="${1}"
	level="${2:-1}" # default 1 if not given
	i=0
  # only level up to VERBOSITY
	if [ ${level} -le ${VERBOSITY} ]; then
    # print '=' for every level
		while [ ${i} -lt ${level} ]; do
      # colorize in debug mode
      if [ -n "${DEBUG-}" ]; then
        printf "${RED}=${NC}\n" >&2
      else
        printf "=" >&2
      fi
			i=$(( ${i} + 1 ))
		done
    # print verbose message (colorize in debug mode)
    if [ -n "${DEBUG-}" ]; then
  		echo "${RED}> ${msg}${NC}" >&2
    else
  		echo "> ${msg}" >&2
    fi
	fi
}

#######################################
# Show extracted shortcuts from input.conf.
# Globals:
#   PROGPATH
#		YELLOW
#		NC
# Arguments:
#   None
# Outputs:
#   shortcut to STDOUT
# Returns:
#   None
#######################################
keys()
{
	if [ ! -f "${PROGPATH}input.conf" ]; then
		printf "%b\n" "${YELLOW}Warning: '${PROGPATH}input.conf' with key definition does not exist${NC}" 1>&2
		exit 1
	fi
	echo "Shortcuts:"
  # grep all lines start not with #
  grep '^[[:blank:]]*[^[:blank:]#]' ${PROGPATH}input.conf
        verbose "keys (${LINENO}): grep shortcuts from 'input.conf': $?" 2
  exit 0
}

#######################################
# Prints timetable with conferene, start and end date.
# Globals:
#   None
# Arguments:
#   api json in JSON
# Outputs:
#   startsAt \t endsAt \t conferene to STDOUT
# Returns:
#   None
#######################################
timetable_array ()
{
	verbose "timetable_array (${LINENO}): Create timetable array"
	# Catch conference, startsAt, endsAt of every stream event
	result="$(echo "$1" | grep -E "\"conference\": \"?.+\"?,|\"startsAt\": \"?.+\"?,|\"endsAt\": \"?.+\"?,")"
				verbose "timetable_array (${LINENO}): Grep 'conference, startsAt, endsAt and values': $?" 2
	# Make one plain, clean line of them all
	result="$(echo "${result}" | awk '{$1=$1;print}')"
			  verbose "timetable_array (${LINENO}): Remove leading/trailing white spaces: $?" 2
	result="$(echo "${result}" | sed 's/,$//g')"
        verbose "timetable_array (${LINENO}): Remove trailing commas: $?" 2
  result="$(echo "${result}" | tr '\n' '\t')"
        verbose "timetable_array (${LINENO}): Replace all newlines with tabs: $?" 2
  # Make every stream event a single line
  result="$(echo "${result}" | sed 's/\"conference/\'$'\n\"conference/g')"
        verbose "timetable_array (${LINENO}): Insert newlines before conference: $?" 2
  # Remove first empty line
  result="$(echo "${result}" | tail -n +2)"
        verbose "timetable_array (${LINENO}): Remove first newline: $?" 2
  # Remove all keys from key:value
	result="$(echo "${result}" | sed 's/\"conference\": //g')"
				verbose "timetable_array (${LINENO}): Remove 'conference': $?" 2
	result="$(echo "${result}" | sed 's/\"startsAt\": //g')"
				verbose "timetable_array (${LINENO}): Remove 'startsAt': $?" 2
  result="$(echo "${result}" | sed 's/\"endsAt\": //g')"
        verbose "timetable_array (${LINENO}): Remove 'endsAt': $?" 2
  result="$(echo "${result}" | sed 's/\"//g')"
        verbose "timetable_array (${LINENO}): Remove all \": $?" 2
	# Remove +0000 in timestamps
	result="$(echo "${result}" | sed 's/+0000//g')"
        verbose "timetable_array (${LINENO}): Remove '+0000': $?" 2
	# Change order and set conference last
	result="$(echo "${result}" | awk -v FS='\t' -v OFS='\t' '{print $2, $3, $1}')"
				verbose "timetable_array (${LINENO}): Change order: $?" 2
	# Return only events that are running or planned
	date="$(date -u +"%Y-%m-%dT%H:%M:%S")" # now
	result="$(echo "${result}" | awk -F '\t' -v force_date="${date}" '$2>=force_date && $2!="null" {print $0}')"
				verbose "timetable_array (${LINENO}): Strip timetable array to now"
	# Remove disturbing 'T' from UTC timestamps
	result="$(echo "${result}" | sed 's/\([0-9]\{4\}-[0-9][0-9]-[0-9][0-9]\)T\([0-9][0-9]:[0-9][0-9]:[0-9][0-9]\)/\1 \2/g')"
				verbose "timetable_array (${LINENO}): Remove 'T' from timestamps: $?" 2
	if [ -z "${result-}" ]; then
		printf "%b\n" "${YELLOW}Warning: no events found${NC}" 1>&2
	else
		printf "%b\n" "${YELLOW}starts at (UTC)\t\tends at (UTC)\t\tconference${NC}" 1>&2
		printf "%b\n" "${result}" 1>&2
	fi
}

#######################################
# Convert stream api json to server array.
# Globals:
#   FORCE
#   FORCE_DATE
# Arguments:
#   api json in JSON
# Outputs:
#   (endsAt \t display \t stream [ \t display \t stream ]*\n?)* to STDOUT
# Returns:
#   result
#######################################
server_array ()
{
  verbose "server_array (${LINENO}): Create server array"
  # Catch endsAt, display (name of room) and stream of ervery stream event
  result="$(echo "$1" | grep -E "\"endsAt\": \"?.+\"?,|^\s{24}\"display\": \"?.+\"?,|\"stream\": \"?.+\"?,")"
        verbose "server_array (${LINENO}): Grep 'endsAt, display, stream including values': $?" 2
  # Make one plain, clean line of them all
  result="$(echo "${result}" | awk '{$1=$1;print}')"
        verbose "server_array (${LINENO}): Remove leading/trailing white spaces: $?" 2
  result="$(echo "${result}" | sed 's/,$//g')"
        verbose "server_array (${LINENO}): Remove trailing commas: $?" 2
  result="$(echo "${result}" | tr '\n' '\t')"
        verbose "server_array (${LINENO}): Replace all newlines with tabs: $?" 2
  # Make every stream event a single line
  result="$(echo "${result}" | sed 's/\"endsAt/\'$'\n\"endsAt/g')"
        verbose "server_array (${LINENO}): Insert newlines before endsAt: $?" 2
  # Remove first empty line
  result="$(echo "${result}" | tail -n +2)"
        verbose "server_array (${LINENO}): Remove first newline: $?" 2
  # Remove all keys from key:value
  result="$(echo "${result}" | sed 's/\"endsAt\": //g')"
        verbose "server_array (${LINENO}): Remove 'endsAt': $?" 2
  result="$(echo "${result}" | sed 's/\"display\": //g')"
        verbose "server_array (${LINENO}): Remove 'display': $?" 2
  result="$(echo "${result}" | sed 's/\"stream\": //g')"
        verbose "server_array (${LINENO}): Remove 'stream': $?" 2
  result="$(echo "${result}" | sed 's/\"//g')"
        verbose "server_array (${LINENO}): Remove all \": $?" 2
  result="$(echo "${result}" | awk -F '\t' '{print $0}')"
  # Return only stream events that are younger then FORCE_DATE
  if [ -n "${FORCE-}" ]; then
    verbose "Forced date: ${FORCE_DATE}"
    result="$(echo "${result}" | awk -F '\t' -v force_date="${FORCE_DATE}" '$1>=force_date && $1!="null" {print $0}')"
          verbose "server_array (${LINENO}): Strip server array to forced days"
  fi
  echo "${result}"
}

#######################################
# Returning only servers from server array.
# Globals:
#   None
# Arguments:
#   server array as given by server_array()
# Outputs:
#   (server \t?)*
# Returns:
#   result
#######################################
server_only ()
{
  # returns odd fields started at 3
  result="$(echo "$1" | awk -F '\t' '{s="";for (i=3;i<=NF;i+=2) {s=s?s FS $i:$i} print s}')"
        verbose "server_only (${LINENO}): Shrink server array to servers only: $?" 2
  echo "${result}"
}


#######################################
# Returning servers sorted alphanumerical.
# Globals:
#   None
# Arguments:
#   servers as given by server_only()
# Outputs:
#   OutputToSTDOUTorSTDERR
# Returns:
#   ReturnedvValuesOtherThenExitStatus
#######################################
sort_alphanum ()
{
  verbose "sort_alphanum (${LINENO}): Sorting servers"
  # Padding numbers with zeros to make sort with leading characters work
  result="$(echo "$1" | awk '{ gsub(/([^[:digit:]]+|[[:digit:]]+)/,"&\t") ; printf("%s%05d\n", $1, $2)}')"
        verbose "sort_alphanum (${LINENO}): Fill numbers with leading zeros: $?" 2
  result="$(echo "${result}" | sort -n)"
        verbose "sort_alphanum (${LINENO}): Sort numerical: $?" 2
  # Split leading characters to remove padded zeros
  result="$(echo "${result}" | awk '{ gsub(/([^[:digit:]]+|[[:digit:]]+)/,"&\t") ; print  $1, $2}')"
        verbose "sort_alphanum (${LINENO}): Split at beginning of number: $?" 2
  result="$(echo "${result}" | awk '{gsub ("^0*", "", $2); printf("%s%s\n", $1, $2)}')"
        verbose "sort_alphanum (${LINENO}): Strip leading zeros and merge: $?" 2
  echo "${result}"
}

#######################################
# Print streaming.json, icecast-status.xsl.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
printjson ()
{
	# Export icecast status to disk
	curl -sSf http://live.ber.c3voc.de:7999/status-json.xsl > status_liveber.xsl
	curl -sSf http://ingest.c3voc.de:8000/status-json.xsl > status_ingest.xsl
	# Export streaming.json to disk
	if [ -n "${FORCE-}" ]; then
    # with option forceopen=1 (shows all streams done, running and planned)
    JSON="$(curl -sSf https://streaming.media.ccc.de/streams/v2.json?forceopen=1)"
  else
    # shows only running streams
    JSON="$(curl -sSf https://streaming.media.ccc.de/streams/v2.json)"
  fi
	echo "${JSON}" > current.json
	# Don't start mpv and avoid deleting current-playlist.m3u8
	EXIT=true
}

#######################################
# Cleanup on exit.
#   Delete current-playlist (if not EXIT).
# Globals:
#   PLAYLIST
#   EXIT
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
cleanup ()
{
  verbose "cleanup (${LINENO}): Cleanup on exit" 3
  PLAYLIST="current-playlist.m3u8"
  if [ -e "${PLAYLIST}" ] && [ -z "${EXIT-}" ]; then
    rm "${PLAYLIST}"
          verbose "cleanup (${LINENO}): Delete 'current-playlist.m3u8': $?" 3
  fi
  exit 0
}

#######################################
# Opens man page strobs.1.
# Globals:
#   PROGPATH
#		YELLOW
#		NC
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
manpage()
{
	if [ ! -f "${PROGPATH}strobs.1" ]; then
		printf "%b\n" "${YELLOW}Warning: man page '${PROGPATH}strobs.1' does not exist${NC}" 1>&2
		exit 1
	fi
	man ${PROGPATH}strobs.1
	exit 0
}

#######################################
# Prints the usage manual.
# Globals:
#   PROGNAME
#   UNDERLINED
#   NC
# Arguments:
#   None
# Outputs:
#   usage to SDTOUT
# Returns:
#   None
#######################################
manual()
{
  echo "Usage: ${PROGNAME} [ -d | -D | -f ${UNDERLINED}days${NC} | -h | -j | -k | -m | -n | -p ${UNDERLINED}file${NC} | -s | -t | -v | -V | -x]"
  echo "       opens mpv with all active voc streams"
  echo "       -d debug mode: print commands and arguments while executed"
  echo "       -D debug mode: print script lines while read"
  echo "       -f force to open all planned, active and past streams"
  echo "          ${UNDERLINED}days${NC} to the past are mandatory (to omit set 0)"
  echo "       -h help shown"
  echo "       -j json export to disk"
  echo "       -k keys/shortcuts shown"
  echo "       -m man page shown"
  echo "       -n name server with original extension"
  echo "       -p playlist ${UNDERLINED}file${NC} with servers in format m3u8"
  echo "       -s sort server list alphanumerical"
  echo "       -t timetable of running and coming events shown"
  echo "       -v verbosity increasing with ${UNDERLINED}v${NC}"
  echo "       -V version print"
  echo "       -x exit before mpv, keeps current-playlist.m3u8"
  exit 0
}

#######################################
### Main
#######################################

# Check options
while getopts 'dDf:hjkmnp:stvVx' option 2>/dev/null; do
  case "${option}" in
    d ) set -x # print commands and arguments while executed
        DEBUG=true;;
    D ) set -v # print script lines while read
        DEBUG=true;;
    f ) case ${OPTARG} in
          *[!0-9]* ) printf "%b\n" "${YELLOW}Warning: illegal option ${OPTARG} (no number)${NC}" 1>&2
                    exit 1;;
          * ) FORCE_DATE="$(date -v-${OPTARG}d -u +"%Y-%m-%dT%H:%M:%S+0000")"
             FORCE=true;;
        esac;;
    h ) manual;;
    j ) PRINT_JSON=true;;
    k ) keys;;
		m ) manpage;;
    n ) NAME_EXT=true;;
    p ) PLAYLIST="${OPTARG}";;
    s ) SORT=true;;
    t ) TIMETABLE=true
				FORCE=true;;
    v ) VERBOSITY=$(( ${VERBOSITY} + 1 ));;
    V ) echo "${PROGNAME} version ${VERSION}"
        exit 0;;
    x ) EXIT=true;;
    * ) if [ $1 != "-?" ]; then
          curropt=$(( ${OPTIND} - 1 ))
          eval "curropt=\$${curropt}"
          printf "%b\n" "${YELLOW}Warning: illegal option ${curropt}${NC}" 1>&2
        fi
        manual;;
  esac
done
verbose "${YELLOW}Note: number after colon usually represents commands exit code${NC}"
verbose "Level of verbosity: ${VERBOSITY}"

# Exit handler
trap cleanup 0 1 2 3 6

# check for option -j
if [ -n "${PRINT_JSON-}" ]; then
	printjson
fi

# Check if mpv is existing
if ! [ -x "$(command -v mpv)" ]; then
  printf "%b\n" "${RED}Error: mpv does not exist, please install${NC}" 1>&2
  exit 1
fi

# Catch icecast status live.ber
ICECAST="$(curl -sSf http://live.ber.c3voc.de:7999/status-json.xsl)"
# Check if streaming - then "listenurl" is inside
if [ "$(echo "${ICECAST}" | grep listenurl -c)" = 0 ]; then
	# Check if ingest server is receiving
	ICECAST="$(curl -sSf http://ingest.c3voc.de:8000/status-json.xsl)"
	if [ "$(echo "${ICECAST}" | grep listenurl -c)" = 0 ]; then
		printf "%b\n" "${YELLOW}Warning: no active streams available${NC}" 1>&2
    exit 1
	else
		printf "%b\n" "${YELLOW}Warning: no active streams available but ingest is active - try a bit later${NC}" 1>&2
    exit 1
	fi
fi

# Choose the playlist
# Playlist given with option -p
if [ -n "${PLAYLIST-}" ]; then
        verbose "Used playlist: ${PLAYLIST}"
  if [ ! -f "${PLAYLIST}" ]; then
		if wget --spider "${PLAYLIST}" 2>/dev/null; then
				verbose "Used playlist is remote"
		else
			if [ ! -n "${FORCE-}" ]; then
		    printf "%b\n" "${YELLOW}Warning: playlist '${PLAYLIST}' does not exist, but you can enforce with option -f${NC}" 1>&2
		    exit 1
			fi
		fi
  fi
else
  # This playlist should have only servers found at icecast status
  PLAYLIST="current-playlist.m3u8"
        verbose "Used playlist: ${PLAYLIST}"

  # Read running streams by api json
				verbose "main (${LINENO}): Read stream json"
  JSON="$(curl -sSf https://streaming.media.ccc.de/streams/v2.json)"
        verbose "main (${LINENO}): Curl json: $?" 2
				verbose "Stream api json:\n${JSON}" 4

  # Exit if trimmed (all white spaces) $JSON is empty
  if [ "$(echo "${JSON}" | tr -d "[:blank:]")" = "[]" ]; then
    printf "%b\n" "${YELLOW}Warning: no active streams available${NC}" 1>&2
    exit 1
  fi

	# Option -t; print timetable of running and coming events
	if [ -n "${TIMETABLE-}" ]; then
		# Print start date, end date and conference from $JSON
		timetable_array "${JSON}"
		exit 0
	fi

  # Find servers in $JSON including end date and room names
  SERVER_ARRAY="$(server_array "${JSON}")"
        verbose "Server array:\n${SERVER_ARRAY}" 4
  # Trim to servers only
  SERVER="$(server_only "${SERVER_ARRAY}")"
  SERVER="$(echo "${SERVER}" | tr '\t' '\n')"
        verbose "main (${LINENO}): Newline separated server list: $?" 2
  # Shrink servers to unique ones
  SERVER="$(echo "${SERVER}" | awk '!a[$0]++')"
        verbose "main (${LINENO}): Shrink to unique servers: $?" 2
  # Exit if no servers found
  if [ "${SERVER}" = "" ]; then
    printf "%b\n" "${YELLOW}Warning: no searched streams available${NC}" 1>&2
    exit 1
  fi
  # Sort servers alphanumerical
  if [ -n "${SORT-}" ]; then
    SERVER="$(sort_alphanum "${SERVER}")"
  fi
  verbose "Extracted servers:\n${SERVER}" 3

  # Create playlist
  # Playlist header
  echo "#EXTM3U" > "${PLAYLIST}"
  echo "#EXT-X-VERSION:3" >> "${PLAYLIST}"
  # Repeat playlist names and servers and "#EXT-X-DISCONTINUITY"
  for STREAM in ${SERVER}
  do
      # Write servers name as info into playlist; if option '-n' add ($STREAM) the technical server name
      NAME="$(echo "${SERVER_ARRAY}" | awk -F '\t' -v stream="${STREAM}" '{ for (x=1;x<=NF;x++) if ($x==stream) {print $(x-1); exit} }')"
      if [ -n "${NAME_EXT-}" ]; then
        echo "#EXTINF:0,${NAME} (${STREAM})" >> "${PLAYLIST}"
      else
        echo "#EXTINF:0,${NAME}" >> "${PLAYLIST}"
      fi
			# Write normal server with http into playlist if start with 's' and followed by digits only
      if [ "$(expr "${STREAM}" : ^s[[:digit:]][[:digit:]]*$)" -gt 0 ]; then
				echo "${SERVERPATH}${STREAM}" >> "${PLAYLIST}"
						verbose "Add ${SERVERPATH}${STREAM} to playlist: $?" 3
      else
				# all other servers are ingest servers with rtmp
				echo "${RTMPPATH}${STREAM}" >> "${PLAYLIST}"
						verbose "Add ${RTMPPATH}${STREAM} to playlist: $?" 3
      fi
      # Write playlist divider
      echo "#EXT-X-DISCONTINUITY" >> "${PLAYLIST}"
  done
  {
    # Set a picture as last, so mpv will not end
    echo "#EXTINF:0,end of list"
    echo "${PROGPATH}voctocat.png"
    # End of playlist
    echo "#EXT-X-ENDLIST"
  } >> "${PLAYLIST}"
  verbose "main (${LINENO}): Playlist complete: $?"
fi

# Exit if set option '-x'
if [ -n "${EXIT-}" ]; then
  exit 0
fi

# That is really playing
# Check mpv options in README.md
mpv "${PLAYLIST}" \
  --fs \
  --no-ytdl \
  --msg-level=all=error,ffmpeg=fatal \
  --no-input-default-bindings \
  --use-filedir-conf \
  --load-scripts=no \
  --scripts=${PROGPATH}keys.lua \
  --force-window=immediate \
  --keep-open=always \
  --idle=yes \
  --vd-lavc-show-all=yes \
  --no-initial-audio-sync \
  --audio-stream-silence=yes \
  --demuxer-cache-wait=no \
  --screenshot-format=png \
  --script-opts=osc-visibility=always \
  --osd-duration=5000 \
  --osd-msg1="room: 1 – 0       audio: q, w, e - Native, Translated, Translated-2       video: y, x - HD, Slides" \
  --no-osd-bar \
  --osd-font-size=30 \
  --osd-spacing=1 \
  --osd-border-size=1 \
  --osd-margin-x=10 \
  --osd-margin-y=4

verbose "Exit"
exit 0
