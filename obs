#! /bin/sh

# set e: exit if something fails; set u: exit if a variable is unset
set -eu

# Declare variables:
unset FORCE_DAYS
readonly SERVERPATH="http://live.ber.c3voc.de:7999/"
readonly RTMPPATH="rtmp://ingest.c3voc.de/stream/"
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color
readonly PROGNAME="${0##*/}"
VERBOSITY=0
ALL=false
FORCE=false

# Verbose messages
verbose() {
	msg="${1}"
	level="${2:-1}"
	i=0

	if [ ${level} -le ${VERBOSITY} ]; then
		while [ ${i} -lt ${level} ]; do
			printf "=" >&2
			i=$(( ${i} + 1 ))
		done
		echo "> ${msg}" >&2
	fi
}

# Short manual
manual()
{
  echo "Usage: ${PROGNAME} [-a | -f | -h | -k]"
  echo "       opens mpv with all active voc streams"
  echo "       -a tries to open all streams listed in 'complete-playlist.m3u8'"
  echo "       -f tries to open all active and planned streams"
  echo "       -h shows this help"
  echo "       -k shows shortcuts"
  exit
}

# Show extracted shortcuts from input.conf
keys()
{
  echo "Shortcuts:"
  grep '^[[:blank:]]*[^[:blank:]#]' input.conf
  exit
}

# Cleanup on exit
cleanup ()
{
  # Delete the current playlist if exists
  PLAYLIST="current-playlist.m3u8"
  if [ -e "$PLAYLIST" ]; then
      rm "$PLAYLIST"
  fi
  exit
}

# Check options
while getopts 'af:hkv' option 2>/dev/null; do
  case $option in
    a ) ALL=true;;
    f ) FORCE_DAYS="${OPTARG}"
        FORCE=true;;
    h ) manual;;
    k ) keys;;
    v)  VERBOSITY=$(( ${VERBOSITY} + 1 ));;
    * ) if [ $1 != "-?" ]; then
          curropt=$(($OPTIND - 1))
          eval "curropt=\$$curropt"
          printf "%b\n" "${YELLOW}Warning: illegal option ${curropt}${NC}" 1>&2
        fi
        manual;;
  esac
done
verbose "Verbosity: $VERBOSITY"

# Exit handler
trap cleanup 0 1 2 3 6

# Choose the playlist
if [ $ALL = true ]; then
  # This playlist has all servers
  PLAYLIST="complete-playlist.m3u8"
else
  # This playlist should have only servers found in https://streaming.media.ccc.de/streams/v2.json and will be created
  PLAYLIST="current-playlist.m3u8"

  # Read current active streams by api json
  if [ $FORCE = true ]; then
    # with option forceopen=1 (shows all streams done, running and planned)
    JSON="$(curl https://streaming.media.ccc.de/streams/v2.json?forceopen=1 2>/dev/null)"
  else
    # shows only running streams
    JSON="$(curl https://streaming.media.ccc.de/streams/v2.json 2>/dev/null)"
    # JSON="$(cat xtemp/example.json 2>/dev/null)"
  fi

  # Check if trimmed (all white spaces) $JSON is empty
  if [ "$(echo "$JSON" | tr -d "[:blank:]")" = "[]" ] && [ $ALL = false ]; then
    printf "%b\n" "${YELLOW}Warning: no active streams available${NC}" 1>&2
    exit 1
  fi

  # Find all streaming servers in $JSON, trim to server only [sq]\d{1,3} and push into array
  # source: https://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash/13196466
  REGEX="\"stream\": \".+\""
  SERVER="$(echo "$JSON" | grep -oE "$REGEX" | sed 's/"stream": "//g' | sed 's/"//g')"
  SERVER_ARRAY="$(echo "$SERVER" | sed 's/,/\n/g')"
  SERVER_ARRAY="$(echo "$SERVER_ARRAY" | sort)"
  SERVER_ARRAY="$(echo "$SERVER_ARRAY" | uniq)"

  # Create playlist
  # Playlist header
  echo "#EXTM3U" > $PLAYLIST
  echo "#EXT-X-VERSION:3" >> $PLAYLIST
  # Repeat playlist names and servers and "#EXT-X-DISCONTINUITY"
  for STREAM in $SERVER_ARRAY
  do
      # Write servers name as info into playlist
      echo "#EXTINF:0,$STREAM" >> $PLAYLIST
      # If servers first letter is "q" write it as an rtmp server
      if [ "$(echo "$STREAM" | head -c1)" = "q" ]; then
        echo "$RTMPPATH$STREAM" >> $PLAYLIST
      # Write normal server with http into playlist
      else
        echo "$SERVERPATH$STREAM" >> $PLAYLIST
      fi
      # Write playlist divider
      echo "#EXT-X-DISCONTINUITY" >> $PLAYLIST
  done
  {
    # Set a picture as last server, so mpv will not end by accident
    echo "#EXTINF:0,end of list"
    echo "voctocat.png"
    # End of playlist
    echo "#EXT-X-ENDLIST"
  } >> $PLAYLIST
fi

# That is really playing
mpv $PLAYLIST \
  --fs \
  --no-ytdl \
  --msg-level=all=error,ffmpeg=fatal \
  --no-input-default-bindings \
  --config-dir=. \
  --load-scripts=no \
  --scripts=select-audio.lua:select-video.lua:select-venue.lua \
  --force-window=immediate \
  --keep-open=always \
  --idle=yes \
  --vd-lavc-show-all=yes \
  --no-initial-audio-sync \
  --audio-stream-silence=yes \
  --demuxer-cache-wait=no \
  --screenshot-format=png \
  --script-opts=osc-visibility=always \
  --osd-duration=5000 \
  --osd-msg1="room: 1 â€“ 0       audio: q, w, e - Native, Translated, Translated-2       video: y, x - HD, Slides" \
  --no-osd-bar \
  --osd-font-size=30 \
  --osd-spacing=1 \
  --osd-border-size=1 \
  --osd-margin-x=10 \
  --osd-margin-y=4

exit
